# Task ID: 8
# Title: Contact and Lead Generation Forms
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Implement contact forms with validation and lead generation features including special offers.
# Details:
1. Create form schemas using Zod:
```typescript
// src/schemas/contact.ts
import { z } from 'zod'

export const contactFormSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),
  email: z.string().email({ message: 'Please enter a valid email address' }),
  phone: z.string().optional(),
  company: z.string().optional(),
  service: z.string().optional(),
  message: z.string().min(10, { message: 'Message must be at least 10 characters' }),
  budget: z.enum(['< $5,000', '$5,000 - $10,000', '$10,000 - $25,000', '$25,000 - $50,000', '$50,000+']).optional(),
  timeline: z.enum(['ASAP', '1-3 months', '3-6 months', '6+ months']).optional(),
  termsAccepted: z.literal(true, {
    errorMap: () => ({ message: 'You must accept the terms and conditions' }),
  }),
})

export type ContactFormValues = z.infer<typeof contactFormSchema>
```

2. Create the ContactForm component with React Hook Form:
```tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { toast } from 'sonner'
import { contactFormSchema, type ContactFormValues } from '@/schemas/contact'
import { Button } from '@/components/ui/Button'

export function ContactForm() {
  const form = useForm<ContactFormValues>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      company: '',
      service: '',
      message: '',
      termsAccepted: false,
    },
  })
  
  const onSubmit = async (data: ContactFormValues) => {
    try {
      // In a real app, you would send this data to your backend
      console.log('Form data:', data)
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast.success('Message sent successfully! We\'ll be in touch soon.')
      form.reset()
    } catch (error) {
      toast.error('Failed to send message. Please try again.')
      console.error(error)
    }
  }
  
  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <label htmlFor="name" className="text-sm font-medium">
            Name <span className="text-red-500">*</span>
          </label>
          <input
            id="name"
            {...form.register('name')}
            className="w-full p-3 border rounded-md"
          />
          {form.formState.errors.name && (
            <p className="text-sm text-red-500">{form.formState.errors.name.message}</p>
          )}
        </div>
        
        <div className="space-y-2">
          <label htmlFor="email" className="text-sm font-medium">
            Email <span className="text-red-500">*</span>
          </label>
          <input
            id="email"
            type="email"
            {...form.register('email')}
            className="w-full p-3 border rounded-md"
          />
          {form.formState.errors.email && (
            <p className="text-sm text-red-500">{form.formState.errors.email.message}</p>
          )}
        </div>
        
        {/* Add other form fields: phone, company, service dropdown, budget, timeline */}
        
        <div className="space-y-2 md:col-span-2">
          <label htmlFor="message" className="text-sm font-medium">
            Message <span className="text-red-500">*</span>
          </label>
          <textarea
            id="message"
            {...form.register('message')}
            rows={5}
            className="w-full p-3 border rounded-md"
          />
          {form.formState.errors.message && (
            <p className="text-sm text-red-500">{form.formState.errors.message.message}</p>
          )}
        </div>
        
        <div className="md:col-span-2">
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              {...form.register('termsAccepted')}
              className="h-4 w-4"
            />
            <span className="text-sm">
              I accept the <a href="/terms" className="text-primary hover:underline">Terms and Conditions</a>
            </span>
          </label>
          {form.formState.errors.termsAccepted && (
            <p className="text-sm text-red-500 mt-1">{form.formState.errors.termsAccepted.message}</p>
          )}
        </div>
      </div>
      
      <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
        {form.formState.isSubmitting ? 'Sending...' : 'Send Message'}
      </Button>
    </form>
  )
}
```

3. Create the ContactPage component:
```tsx
import { ContactForm } from '@/components/ContactForm'
import { motion } from 'framer-motion'

export default function ContactPage() {
  return (
    <div className="container py-12 md:py-20">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h1 className="text-4xl font-bold tracking-tight mb-4">Get in Touch</h1>
          <p className="text-xl text-muted-foreground mb-8">
            Ready to start your next project? Contact us today for a free consultation.
          </p>
          
          <div className="space-y-6 mb-8">
            <div>
              <h3 className="text-lg font-semibold mb-2">Email</h3>
              <p className="text-muted-foreground">info@avanxia.com</p>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold mb-2">Phone</h3>
              <p className="text-muted-foreground">+1 (555) 123-4567</p>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold mb-2">Address</h3>
              <p className="text-muted-foreground">
                123 Digital Avenue<br />
                Tech District<br />
                San Francisco, CA 94107
              </p>
            </div>
          </div>
          
          <div className="bg-primary/10 p-6 rounded-lg">
            <h3 className="text-lg font-semibold mb-2">Special Offer</h3>
            <p className="mb-4">Get a free website audit and consultation when you contact us this month!</p>
            <p className="text-sm text-muted-foreground">Valid until December 31, 2023</p>
          </div>
        </motion.div>
        
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="bg-muted p-8 rounded-lg"
        >
          <ContactForm />
        </motion.div>
      </div>
    </div>
  )
}
```

4. Create a LeadMagnet component for special offers:
```tsx
import { useState } from 'react'
import { toast } from 'sonner'
import { Button } from '@/components/ui/Button'

export function LeadMagnet() {
  const [email, setEmail] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!email) return
    
    setIsSubmitting(true)
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      toast.success('Thanks for subscribing! Check your email for your free guide.')
      setEmail('')
    } catch (error) {
      toast.error('Failed to subscribe. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }
  
  return (
    <div className="bg-primary text-white p-8 rounded-lg">
      <h3 className="text-xl font-bold mb-2">Get Our Free Guide</h3>
      <p className="mb-4">"10 Essential Strategies for Digital Success in 2024"</p>
      
      <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-3">
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Your email address"
          required
          className="flex-1 px-4 py-2 rounded text-foreground"
        />
        <Button 
          type="submit" 
          disabled={isSubmitting}
          className="bg-white text-primary hover:bg-white/90"
        >
          {isSubmitting ? 'Sending...' : 'Get It Free'}
        </Button>
      </form>
    </div>
  )
}
```

5. Implement form submission handling (in a real app, this would connect to a backend)
6. Create a newsletter subscription component
7. Add a floating contact button that appears on scroll
8. Implement a contact success/thank you page

# Test Strategy:
1. Test form validation for all required fields
2. Verify error messages display correctly
3. Test form submission flow (success and error states)
4. Ensure toast notifications appear correctly
5. Test form reset after successful submission
6. Verify special offer component displays correctly
7. Test newsletter subscription form
8. Ensure contact information is displayed correctly
9. Test responsive layout on different screen sizes
10. Verify floating contact button appears/disappears correctly on scroll
