# Task ID: 10
# Title: Media Optimization and Performance
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Implement image and video optimization, lazy loading, and performance improvements.
# Details:
1. Create an optimized image component:
```tsx
// src/components/ui/OptimizedImage.tsx
import { useState, useEffect } from 'react'
import { cn } from '@/utils/cn'

interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {
  src: string
  alt: string
  className?: string
  width?: number
  height?: number
  sizes?: string
  priority?: boolean
}

export function OptimizedImage({
  src,
  alt,
  className,
  width,
  height,
  sizes = '100vw',
  priority = false,
  ...props
}: OptimizedImageProps) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [currentSrc, setCurrentSrc] = useState(priority ? src : '')
  
  useEffect(() => {
    if (!priority) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setCurrentSrc(src)
            observer.disconnect()
          }
        })
      })
      
      const imgElement = document.querySelector(`[data-img-src="${src}"]`)
      if (imgElement) observer.observe(imgElement)
      
      return () => observer.disconnect()
    }
  }, [src, priority])
  
  return (
    <div 
      className={cn('relative overflow-hidden', className)}
      style={{ aspectRatio: width && height ? width / height : undefined }}
      data-img-src={src}
    >
      {currentSrc && (
        <img
          src={currentSrc}
          alt={alt}
          width={width}
          height={height}
          onLoad={() => setIsLoaded(true)}
          className={cn(
            'w-full h-full object-cover transition-opacity duration-500',
            isLoaded ? 'opacity-100' : 'opacity-0'
          )}
          {...props}
        />
      )}
      {!isLoaded && (
        <div className="absolute inset-0 bg-muted animate-pulse" />
      )}
    </div>
  )
}
```

2. Create a script for image optimization using Sharp:
```javascript
// scripts/optimize-images.js
const sharp = require('sharp')
const fs = require('fs')
const path = require('path')
const glob = require('glob')

const inputDir = 'src/assets/images'
const outputDir = 'public/images'

// Create output directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true })
}

// Get all image files
const imageFiles = glob.sync(`${inputDir}/**/*.{jpg,jpeg,png}`, { nodir: true })

// Process each image
async function processImages() {
  for (const file of imageFiles) {
    const filename = path.basename(file)
    const relativePath = path.relative(inputDir, path.dirname(file))
    const outputPath = path.join(outputDir, relativePath)
    
    // Create output subdirectory if needed
    if (!fs.existsSync(outputPath)) {
      fs.mkdirSync(outputPath, { recursive: true })
    }
    
    // Original size WebP
    await sharp(file)
      .webp({ quality: 80 })
      .toFile(path.join(outputPath, `${path.parse(filename).name}.webp`))
    
    // Thumbnail (400px width)
    await sharp(file)
      .resize(400, null, { withoutEnlargement: true })
      .webp({ quality: 75 })
      .toFile(path.join(outputPath, `${path.parse(filename).name}-400.webp`))
    
    // Medium size (800px width)
    await sharp(file)
      .resize(800, null, { withoutEnlargement: true })
      .webp({ quality: 75 })
      .toFile(path.join(outputPath, `${path.parse(filename).name}-800.webp`))
    
    // Large size (1200px width)
    await sharp(file)
      .resize(1200, null, { withoutEnlargement: true })
      .webp({ quality: 75 })
      .toFile(path.join(outputPath, `${path.parse(filename).name}-1200.webp`))
    
    console.log(`Processed: ${file}`)
  }
}

processImages()
  .then(() => console.log('Image optimization complete!'))
  .catch(err => console.error('Error optimizing images:', err))
```

3. Add the script to package.json:
```json
{
  "scripts": {
    "optimize-images": "node scripts/optimize-images.js"
  }
}
```

4. Create a video optimization component:
```tsx
// src/components/ui/OptimizedVideo.tsx
import { useState, useEffect, useRef } from 'react'
import { cn } from '@/utils/cn'

interface OptimizedVideoProps {
  src: string
  poster?: string
  className?: string
  autoPlay?: boolean
  loop?: boolean
  muted?: boolean
  controls?: boolean
  preload?: 'auto' | 'metadata' | 'none'
}

export function OptimizedVideo({
  src,
  poster,
  className,
  autoPlay = true,
  loop = true,
  muted = true,
  controls = false,
  preload = 'metadata'
}: OptimizedVideoProps) {
  const [isVisible, setIsVisible] = useState(false)
  const videoRef = useRef<HTMLVideoElement>(null)
  
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setIsVisible(true)
            observer.disconnect()
          }
        })
      },
      { threshold: 0.1 }
    )
    
    if (videoRef.current) {
      observer.observe(videoRef.current)
    }
    
    return () => observer.disconnect()
  }, [])
  
  return (
    <video
      ref={videoRef}
      className={cn('w-full', className)}
      poster={poster}
      autoPlay={isVisible && autoPlay}
      loop={loop}
      muted={muted}
      controls={controls}
      preload={preload}
      playsInline
    >
      {isVisible && <source src={src} type="video/mp4" />}
      Your browser does not support the video tag.
    </video>
  )
}
```

5. Create a script for video optimization using FFmpeg (requires FFmpeg to be installed):
```javascript
// scripts/optimize-videos.js
const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')
const glob = require('glob')

const inputDir = 'src/assets/videos'
const outputDir = 'public/videos'

// Create output directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true })
}

// Get all video files
const videoFiles = glob.sync(`${inputDir}/**/*.{mp4,mov}`, { nodir: true })

// Process each video
function processVideos() {
  for (const file of videoFiles) {
    const filename = path.basename(file)
    const relativePath = path.relative(inputDir, path.dirname(file))
    const outputPath = path.join(outputDir, relativePath)
    
    // Create output subdirectory if needed
    if (!fs.existsSync(outputPath)) {
      fs.mkdirSync(outputPath, { recursive: true })
    }
    
    const outputFile = path.join(outputPath, `${path.parse(filename).name}.mp4`)
    
    // Optimize video using FFmpeg
    const command = `ffmpeg -i "${file}" -c:v libx264 -crf 23 -preset medium -c:a aac -b:a 128k -movflags +faststart -vf "scale='min(1280,iw)':'-2'" "${outputFile}"`
    
    try {
      execSync(command)
      console.log(`Processed: ${file}`)
    } catch (error) {
      console.error(`Error processing ${file}:`, error.message)
    }
    
    // Generate poster image
    const posterFile = path.join(outputPath, `${path.parse(filename).name}-poster.jpg`)
    const posterCommand = `ffmpeg -i "${outputFile}" -ss 00:00:01 -frames:v 1 "${posterFile}"`
    
    try {
      execSync(posterCommand)
      console.log(`Generated poster for: ${file}`)
    } catch (error) {
      console.error(`Error generating poster for ${file}:`, error.message)
    }
  }
}

processVideos()
console.log('Video optimization complete!')
```

6. Add the script to package.json:
```json
{
  "scripts": {
    "optimize-videos": "node scripts/optimize-videos.js"
  }
}
```

7. Implement lazy loading for all components
8. Add resource hints (preconnect, prefetch) for critical resources
9. Configure Vite for optimal production builds
10. Implement code splitting for routes

# Test Strategy:
1. Test image optimization script with various image types and sizes
2. Verify optimized images load correctly and maintain quality
3. Test video optimization script with different video formats
4. Ensure lazy loading works correctly for images and videos
5. Measure performance improvements using Lighthouse
6. Test loading times on slow connections
7. Verify resource hints are working correctly
8. Test code splitting by analyzing bundle sizes
9. Ensure optimized media works across different browsers
10. Verify fallbacks work when WebP is not supported
